{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tsk.monster","text":""},{"location":"#a-cute-little-tsk-runner","title":"A cute little tsk runner.","text":""},{"location":"#quick-start","title":"Quick Start","text":"<p>Install:</p> <pre><code>poetry add tsk-monster\n</code></pre> <p>Write a <code>tskfile.py</code>:</p> tskfile.py<pre><code>from tsk_monster import tsk\n\n\ndef download_image():\n    yield tsk(\n        'wget -O large.jpg https://picsum.photos/200/300',\n        prods=['large.jpg'])\n\n    yield tsk(\n        'convert -resize 100x large.jpg small.jpg',\n        needs=['large.jpg'],\n        prods=['small.jpg'])\n</code></pre> <p>Run: <pre><code>tsk download_image\n</code></pre></p>"},{"location":"#parallel-execution","title":"Parallel Execution","text":"<p>tsk.monster executes independent tasks in parallel and utilizes all available CPU cores on the machine. Here is an example:</p> tskfile.py<pre><code>from tsk_monster import tsk\n\n\ndef download_images():\n    for i in range(10):\n        large = f'large_{i:02}.jpg'\n        small = f'small_{i:02}.jpg'\n\n        yield tsk(\n            f'wget -O {large} https://picsum.photos/200/300',\n            prods=[large])\n\n        yield tsk(\n            f'convert -resize 100x {large} {small}',\n            needs=[large],\n            prods=[small])\n</code></pre>"},{"location":"#prevent-unnecessary-work","title":"Prevent Unnecessary Work","text":"<p>There are three situations in which a task is executed:</p> <ol> <li>If any of the <code>prods</code> files are missing.</li> <li>If any of the <code>needs</code> files were updated since the last run.</li> <li>If the <code>updts</code> list is not empty.</li> </ol> <p>In all other situations, the task is considered up to date and is skipped.</p> <p>In the following example, the first task will be executed only if the file <code>lazy.txt</code> is missing. The second task will always be executed (if yielded), and the third task will be executed only if <code>lazy.txt</code> was updated (touched) since the last run. tskfile.py<pre><code>from random import random\n\nfrom tsk_monster import tsk\n\n\ndef lazy():\n    yield tsk(\n        'touch lazy.txt',\n        prods=['lazy.txt'])\n\n    if random() &lt; 0.5:\n        yield tsk(\n            'touch lazy.txt',\n            updts=['lazy.txt'])\n\n    yield tsk(\n        'echo lazy.txt was updated',\n        needs=['lazy.txt'])\n</code></pre></p>"},{"location":"#dynamic-execution","title":"Dynamic Execution","text":"tskfile.py<pre><code>from functools import partial\nfrom pathlib import Path\n\nfrom PIL import Image\n\nfrom tsk_monster import exist, tsk\n\n\ndef thumbnails():\n    def thumbnail(in_path: Path, out_path: Path):\n        img = Image.open(in_path)\n        img.thumbnail((100, 100))\n        img.save(out_path)\n\n    for in_path in Path('imgs').glob('*.jpg'):\n        out_path = Path('thumbs') / in_path.name\n\n        # Tells tsk.monster that this file exists\n        yield exist(in_path)\n\n        yield tsk(\n            partial(thumbnail, in_path, out_path),\n            needs=[in_path],\n            prods=[out_path])\n</code></pre>"},{"location":"api/","title":"API","text":"<p>tsk.monster - A cute little tsk runner</p>"},{"location":"api/#tsk_monster.Cmd","title":"<code>Cmd</code>","text":"<p>A cmd is an action that is conditionally run based on a predicate.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>Action</code> <p>The action that needs to be run.</p> required <code>need_to_run</code> <code>Predicate</code> <p>A predicate that determines if the action needs to be run.</p> required"},{"location":"api/#tsk_monster.Job","title":"<code>Job</code>  <code>dataclass</code>","text":"<p>A job is a set of commands that need to be run in order to produce a set of artifacts. Artifacts can be files, directories, or any other kind of object. A job can also depend on other artifacts that are produced by other jobs.</p> <p>Parameters:</p> Name Type Description Default <code>needs</code> <code>Set[Any]</code> <p>A set of artifacts that are required by this job.</p> required <code>prods</code> <code>Set[Any]</code> <p>A set of artifacts that are produced by this job.</p> required <code>cmds</code> <code>Generator[Cmd, None, None]</code> <p>A generator of commands that need to be run in order to produce the artifacts.</p> required"},{"location":"api/#tsk_monster.exist","title":"<code>exist(*paths)</code>","text":"<p>Signal that a set of paths already exist.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>Path | str</code> <p>A set of paths that already exist.</p> <code>()</code> <p>Returns:</p> Type Description <p>A dummy job that does nothing.</p>"},{"location":"api/#tsk_monster.monster","title":"<code>monster(*jobs, executor)</code>","text":"<p>Executes a set of jobs in parallel.</p> <p>Parameters:</p> Name Type Description Default <code>jobs</code> <code>Job</code> <p>A set of jobs that need to be run.</p> <code>()</code>"},{"location":"api/#tsk_monster.run","title":"<code>run(*actions, needs=[], prods=[])</code>","text":"<p>Create a job that always runs a set of actions.</p> <p>Parameters:</p> Name Type Description Default <code>actions</code> <code>Action | str</code> <p>A set of actions that need to be run.</p> <code>()</code> <code>needs</code> <code>Paths</code> <p>A set of artifacts that are required by this job.</p> <code>[]</code> <code>prods</code> <code>Paths</code> <p>A set of artifacts that are produced by this job.</p> <code>[]</code>"},{"location":"api/#tsk_monster.tsk","title":"<code>tsk(*actions, desc='', needs=[], prods=[], updts=[])</code>","text":"<p>Create a job. The job will only run if any of the following conditions are met: - Any of the artifacts in <code>needs</code> has been updated since the last run. - Any of the artifacts in <code>prods</code> does not exist. - The <code>updts</code> list is not empty.</p> <p>Parameters:</p> Name Type Description Default <code>actions</code> <code>Action | str</code> <p>A set of actions that need to be run.</p> <code>()</code> <code>desc</code> <code>str</code> <p>A description of the job.</p> <code>''</code> <code>needs</code> <code>Paths</code> <p>A set of artifacts that are required by this job.</p> <code>[]</code> <code>prods</code> <code>Paths</code> <p>A set of artifacts that are produced by this job.</p> <code>[]</code> <code>updts</code> <code>Paths</code> <p>A set of artifacts that are updated by this job.</p> <code>[]</code>"}]}